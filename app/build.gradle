apply plugin: 'com.android.application'
//apply plugin: 'jacoco'
apply from: '../flavored_jacoco.gradle'
//apply from: '../jacoco.gradle'

//jacoco {
//    toolVersion = "0.8.5"
//    reportsDir = file("$buildDir/customJacocoReportDir")
//}
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    flavorDimensions "default"
    defaultConfig {
        applicationId "com.andhradroid.unittestcasedemo"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        dev {
        }
        qa {

        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.code.gson:gson:2.8.6'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'

}


//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        html.destination file("${buildDir}/jacocoHtml")
//
//    }
//
//    def fileFilter = ['**/R.class',
//                      '**/R$*.class',
//                      '**/BuildConfig.*',
//                      '**/Manifest*.*',
//                      '**/*Test*.*',
//                      'android/**/*.*',
//                      '**/data/models/*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories.from([mainSrc])
//    classDirectories.from([debugTree])
//    executionData.from( fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ]))
//}